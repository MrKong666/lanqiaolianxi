cpp：
#include<bits/stdc++.h>
using namespace std;
using PII=pair<int,int>;

 int m,n,k,ans;
int v[1000][1000];
bool st[1000][1000];
int dis[8][2]={1,0,-1,0,0,1,0,-1,1,1,1,-1,-1,1,-1,-1};
void dfs(int x,int y){
	 
	for(int i=0;i<4;i++){
		int nx=x+dis[i][0],ny=y+dis[i][1];
		if(nx<0||ny<0||nx>m+1||ny>n+1)continue;
		if(st[nx][ny]||v[nx][ny]==1)continue;
		
		st[nx][ny]=1;
		dfs(nx,ny);
	}
}
int main() {
   cin>>m;
    n=m;
   for(int i=1;i<=m;i++){
   	 for(int j=1;j<=n;j++){
   	 	cin>>v[i][j];
		}
   }
	dfs(0,0);
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (!st[i][j]&&v[i][j]!=1) v[i][j] = 2;
        }
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cout<< v[i][j]<<" ";
        }
        cout << endl;
    }
    return 0;

}
 

py：

import sys
from collections import *
sys.setrecursionlimit(1000000000)  # 重新设置递归次数

m=int(input())
n=m
v=[[0]*1000]
ans=0
st=[[0]*1000 for _ in range(1000)]
dis=[[1,0],[-1,0],[0,1],[0,-1],[1,1],[1,-1],[-1,1],[-1,-1]]
def dfs(x,y):
    for i in range(0,4):
        nx,ny=x+dis[i][0],y+dis[i][1]
        if(nx<0 or ny <0 or nx>m+1 or ny >n+1):
            continue
        if(st[nx][ny] or v[nx][ny]==1):
            continue
        st[nx][ny]=1
        dfs(nx,ny)


for i in range(0,m):
    v.append([0]+list(map(int,input().split(" ")))+[0])
v.append([0]*1000)
dfs(0,0)
for i in range(1,m+1):
    for j in range(1,n+1):
        if(st[i][j]==0 and v[i][j]==0):
            print(2,end=" ")
        else : print(v[i][j],end=" ")
    print()