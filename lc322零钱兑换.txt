cpp：
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>>memo(n,vector<int>(amount+10,-1));
        auto f=[&](this auto&&f,int x,int sum){
            if(x>=n){
                if(sum==0)return 0;
                return amount+1;
            }
            auto&ans=memo[x][sum];
            if(ans!=-1)return ans;
            ans=amount+1;
            if(sum>=coins[x])ans=min(f(x+1,sum),f(x,sum-coins[x])+1);
            else ans=f(x+1,sum);
            return ans;
        };
        int ans=f(0,amount);
        return ans==amount+1?-1:ans;
        
    }
};
py： （力扣是py最好的语言）
 
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        n=len(coins)
        @cache
        def f(x,sum):
            if(x>=n):
                return amount+1 if(sum) else 0
            ans=f(x+1,sum)
            if(sum>=coins[x]):
                ans=min(f(x+1,sum),f(x,sum-coins[x])+1)
            return ans
        ans=f(0,amount)
        return -1 if(ans==amount+1) else ans





