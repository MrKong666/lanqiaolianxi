cpp：
#include<bits/stdc++.h>
using namespace std;
using PII=pair<int,int>;

 int m,n,k,ans,a,b;
 int res[1000];
int v[1000],v1[1000];
 int w[1000][1000];
 bool f(int x){
 	for(int i=1;i<=m;i++){
 		int sum=0;
 		for(int j=1;j<=x;j++){
 			sum+=w[v[j]][i];
		 }
		if(sum<v1[i])return 0;
	 }
	 return 1;
 }
 void dfs(int x,int sum){
 	if(sum>n){
 		if(f(x)){
 			if(ans>x){
 				ans=x;
 				for(int i=1;i<=ans;i++)
 				res[i]=v[i];
			 }
		 }
		 return;
	 }
	 v[x]=sum;
	 dfs(x+1,sum+1);
	 v[x]=0;
	 dfs(x,sum+1);
 }
int main() {
	ans=INT_MAX;
    cin>>m;
    for(int i=1;i<=m;i++){
    	cin>>v1[i];
	}
	cin>>n;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			cin>>w[i][j];
		}
	}
	dfs(1,1);
	cout<<ans-1<<" ";
	for(int i=1;i<=ans-1;i++){
		cout<<res[i]<<" ";
	}
    return 0;

}
 
 
 
 
 
 
 
 

py：
import sys
from collections import *

sys.setrecursionlimit(1000000000)  # 重新设置递归次数
m=int(input())
v1=list(map(int,input().strip().split()))
n=int(input())
w=[]
res=[0]*1000
v=[0]*1000
for i in range(n):
    w.append(list(map(int,list(input().strip().split()))))
ans=2000000000
def f(x):
    for i in range(m):
        sum=0
        for j in range(x):
            sum+=w[v[j]][i]
        if(sum<v1[i]):
            return 0
    return 1
def dfs(x,s):
    global ans
    if(s>=n):
        if(f(x)):
            if(ans>x):
                ans=x
                for i in range(x):
                    res[i]=v[i]

        return
    v[x]=s
    dfs(x+1,s+1)
    v[x]=0
    dfs(x,s+1)
dfs(0,0)
print(ans,end=" ")
for i in range(ans):
    print(res[i]+1,end=" ")