cpp：
#include<bits/stdc++.h>
using namespace std;
using PII=pair<int,int>;

 int m,n,k,ans,a,b;

vector<string>v;
int st[1010][1010];
int dis[4][2]={1,0,-1,0,0,1,0,-1};
void dfs(int x,int y){
	 st[x][y]=1;
	 for(int i=0;i<4;i++){
	 	int nx=x+dis[i][0],ny=y+dis[i][1];
	 	if(nx<0||ny<0||nx>=m||ny>=n)continue;
	 	if(st[nx][ny]||v[nx][ny]!='#')continue;
	 	dfs(nx,ny);
	 }
}
bool f(int x,int y){
	int sum=0;
	if(v[x][y]=='#')sum++;
	if(v[x+1][y]=='#')sum++;
	if(v[x][y+1]=='#')sum++;
	if(v[x+1][y+1]=='#')sum++;
	return sum==3;
} 
int main() {
   cin>>m>>n;
   for(int i=0;i<m;i++){
   	string s;
   	cin>>s;
   	v.push_back(s);
   }
   for(int i=0;i<m-1;i++){
   	for(int j=0;j<n-1;j++){
   		
   			if(f(i,j)){//判断是否合法 
   				cout<<"Bad placement.";
   				return 0;
			   }
		   }
	   
   }
   for(int i=0;i<m;i++){
   	for(int j=0;j<n;j++){
   		if(v[i][j]=='#'&&!st[i][j]){
   			dfs(i,j);
   			ans++;
		   }
	   }
   }
   printf("There are %d ships.",ans);
    return 0;

}
 
 
 
 

py：
import sys
from collections import *

sys.setrecursionlimit(1000000000)  # 重新设置递归次数
t=list(map(int,input().split()))
m,n=t[0],t[1]
v=[]
ans=0
st=[[0]*1010 for _ in range(1000)]
dis=[[1,0],[-1,0],[0,1],[0,-1]]
def dfs(x,y):
    st[x][y]=1
    for i in dis:
        nx=x+i[0]
        ny=y+i[1]
        if(nx<0 or ny<0 or nx>=m or ny>=n):
            continue
        if(st[nx][ny] or v[nx][ny]!='#'):
            continue
        dfs(nx,ny)
def f(x,y):
    c=0
    if(v[x][y]=='#'):c+=1
    if (v[x+1][y] == '#'): c += 1
    if (v[x][y+1] == '#'): c += 1
    if (v[x+1][y+1] == '#'): c += 1
    return  c==3
for i in range(m):
    v.append(input())
for i in range(m-1):
    for j in range(n-1):
        if(f(i,j)):
            print("Bad placement.")
            sys.exit(0)
for i in range(m):
    for j in range(n):
        if(v[i][j]=='#' and st[i][j]==0):
            dfs(i,j)
            ans+=1
print("There are %d ships."%ans)