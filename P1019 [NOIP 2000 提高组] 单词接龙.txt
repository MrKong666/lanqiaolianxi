cpp：
#include<bits/stdc++.h>
using namespace std;
//#define int long long
typedef pair<int,int> PII; 
using ll=long long;
 
const int N=2200,mod=1e5+3;
int n,m,k;
int zuo,you;
ll ans=0;
int a,b,c,d;
string v[N];
int st[N];
int g[N][N]; 
void dfs(string s,int x){
	ans=max(ans,(ll)s.size());
	st[x]++;
	for(int i=0;i<n;i++){
		if(g[x][i]!=0&&st[i]<2){
			dfs(s+v[i].substr(g[x][i]),i);
		}
	} 
	st[x]--;
}
signed main()
{	
 	cin>>n;
 	for(int i=0;i<n;i++){
 		cin>>v[i];
	 }
	 for(int i=0;i<n;i++){
	 	for(int j=0;j<n;j++){
	 		auto a=v[i],b=v[j];
	 		for(int k=1;k<min(a.size(),b.size());k++){
	 			if(a.substr(a.size()-k,k)==b.substr(0,k)){
	 				g[i][j]=k;
	 				break;
				 }
			 }
		 }
	 }
 	char start;
 	cin>>start;
 	for(int i=0;i<n;i++){
 		if(v[i][0]==start){
 			dfs(v[i],i);
		 }
	 }
	 cout<<ans;
	return 0;	
}
py： 
import sys
from cmath import inf, sqrt
from functools import lru_cache

from sys import stdin
from collections import deque
from collections import defaultdict
sys.setrecursionlimit(1000000000)
ans=0
n=int(input())
v=[]
for i in range(n):
    v.append(input().strip())
start=input().strip()
g=[[0]*n for i in range(n)]
st=[0]*n
for i in range(n):
    for j in range(n):
        a,b=v[i],v[j]
        for k in range(1,min(len(a),len(b))):
            if(a[len(a)-k:]==b[0:k]):
                g[i][j]=k
                break
 
def dfs(s,x):
    global ans
    ans=max(ans,len(s))
    st[x]+=1
    i=0
    while(i<n):
        if(g[x][i]!=0 and st[i]<2):
            dfs(s+v[i][g[x][i]:],i)
        i+=1
    st[x]-=1
for i in range(n):
    if(v[i][0]==start):
        dfs(v[i],i)
print(ans)









