cpp：
#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> PII; 


const int N=1100;
int n,m,k;
int ans=0,sum=0;
vector<vector<int>>v;
//遍历整个树，一旦字树满足k个点，就分配
//如果超出k个点，就无法分配，那么整个就是错的 
int dfs(int x,int fa){
	int res=0;
	for(auto &i:v[x]){
		if(i!=fa){
			int t=dfs(i,x);
			if(t==-1)return -1;
			res+=t;
		}
	}
	if(res+1==k){
		sum++;
		return 0;
		
	}
	if(res+1>k)return -1;
	return res+1;
}

int main()
{
 	int t;
	 cin>>t;
	 while(t--){
	 	cin>>n>>k;
	 	v=vector<vector<int>>(n+1);
	 	for(int i=0;i<n-1;i++){//建图 
	 		int a,b;
	 		cin>>a>>b;
	 		v[a].push_back(b);
	 		v[b].push_back(a);
		 }
		 
		sum=0;//记录联通字块数 
		if(n%k!=0||dfs(1,-1)==-1||sum!=n/k)cout<<"NO\n";
		else cout<<"YES\n";
	 } 
	return 0;	
}



 
 
 
 
 
 
 

py：（有个样例过不了，py大帝出了lc不得行）
from functools import cache
from sys import stdin
from collections import deque
t=int(input())
while(t):
    t-=1
    n, k = map(int, input().split())
    v=[[]for i in range(n+1)]
    for i in range(n-1):
        a,b = map(int, input().split())
        v[a].append(b)
        v[b].append(a)
    sum=0
    @cache
    def dfs(x,fa):
        global sum
        res=1
        for i in v[x]:
            if(i!=fa):
                t=dfs(i,x)
                if(t==-1):return -1
                res+=t
        if(res==k):
            sum+=1
            return 0
        if(res>k):
            return -1
        return res
    if(n%k!=0 or dfs(1,-1)==-1 or sum!=n/k):
        print("NO")
    else:print("YES")
    dfs.cache_clear()


下面这个代码是搞笑的，看看就行了
from functools import cache
from sys import stdin
from collections import deque
t=int(input())
while(t):
    t-=1
    n, k = map(int, input().split())
    for i in range(n-1):
        a,b = map(int, input().split())
    if (n % k):
        print("NO")
    else:
        print("YES")








