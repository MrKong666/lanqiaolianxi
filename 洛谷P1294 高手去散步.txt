cpp：
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
using PII=pair<int,int>;
#define int ll
const int N=1e5+10;
ll ans=0;
const int mod=998244353;

int n,m; 

signed main(){
	cin>>n>>m;
	vector<vector<PII>>v(n+10);
	vector<bool>st(n+10,0);
	for(int i=0;i<m;i++){
		int a,b,c;cin>>a>>b>>c;
		v[a].push_back({c,b});
		v[b].push_back({c,a});
	}
	function<int(int)>dfs=[&](int x){
		int sum=0;
		st[x]=1;
		for(auto &i:v[x]){
			if(!st[i.second]){
				sum=max(sum,dfs(i.second)+i.first);
			}
		}	
		st[x]=0;
		return sum;
	};
	for(int i=1;i<=n;i++){
		ans=max(ans,dfs(i));
	}
	cout<<ans;
	return 0;
}
 
 
 
 
 
 
 

py：
import sys
from collections import *
import queue
sys.setrecursionlimit(1000000000)  # 重新设置递归次数
t=list(map(int,input().split()))
n,m=t[0],t[1]
v=[[]for _ in range(n+10)]
st=[0]*(n+10)
for i in range(m):
    t = list(map(int, input().split()))
    v[t[0]].append([t[2],t[1]])
    v[t[1]].append([t[2], t[0]])
def dfs(x):
    sum=0
    st[x]=1
    for i in v[x]:
        if(st[i[1]]==0):
            sum=max(sum,dfs(i[1])+i[0])
    st[x]=0
    return sum
ans=0
for i in range(1,n+1):
    ans=max(ans,dfs(i))
print(ans)