cpp：
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N=1e5+10;
ll ans=0;
const int mod=998244353;
vector<string>g;
int n,m; 
int dis[4][2]={1,0,-1,0,0,1,0,-1};
bool st[1000][1000];
int flag=0;
bool dfs(int x,int y){
	if(flag)return 1;
	if(x<0||y<0||x>=n||y>=m){
		return 0;
	}
	if(g[x][y]=='g'){
		flag=1;
		return 1;
	}
	st[x][y]=1;
	for(int i=0;i<4;i++){
		int nx=x+dis[i][0],ny=y+dis[i][1];
		if(nx<0||ny<0||nx>=n||ny>=m)continue;
		if(g[nx][ny]=='#'||st[nx][ny])continue;
		if(dfs(nx,ny))return 1;
	}
	return 0;
}
int main(){
	cin>>n>>m;
	for(int i=0;i<n;i++){
		string s;
		cin>>s;
		g.push_back(s);
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(g[i][j]=='s'){
				dfs(i,j);
				if(flag){
					cout<<"Yes";
				}
				else cout<<"No";
				return 0;
			}
		}
	}
	
	
	return 0;
}
 
 
 
 
 
 
 
 

py：
import sys
from collections import *
import queue
sys.setrecursionlimit(1000000000)  # 重新设置递归次数
t=list(map(int,input().split()))
n,m=t[0],t[1]
v=[]
st=[[0]*1000 for i in range(1000)]
dis=[[1,0],[-1,0],[0,1],[0,-1]]
for i in range(n):
    v.append(input().strip())
def bfs(x,y):
    q=collections.deque()
    q.append((x,y))
    while(len(q)):
        cur_x, cur_y = q.popleft()
        if st[cur_x][cur_y]:
            continue
        st[cur_x][cur_y] = 1
        for dx, dy in dis:
            nx, ny = cur_x + dx, cur_y + dy
            if(nx<0 or ny<0 or nx>=n or ny>=m):
                continue
            if(st[nx][ny] or v[nx][ny]=='#'):
                continue
            if(v[nx][ny]=='g'):
                return 1
            q.append((nx,ny))
    return 0
for i in range(n):
    for j in range(m):
        if(v[i][j]=='s'):
            if(bfs(i,j)):
                print("Yes")
            else:
                print("No")