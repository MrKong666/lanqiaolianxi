cpp：
#include<iostream>
#include<cstring>
#include<algorithm>
#include<bits/stdc++.h> 
using namespace std;
#define int long long
const int N=1e6+10;
int n,m,k;
 int v[N] ;
 int w[N];
int ans=0;
int memo[1100][1100];
int dfs(int x,int m){
	if(x>=n)return 0;
	int& ans=memo[x][m];
	if(ans!=-1)return ans;
	if(m>=v[x])ans=max(dfs(x+1,m),dfs(x+1,m-v[x])+w[x]);
	else ans=dfs(x+1,m);
	return ans;
}
signed main()
{
	memset(memo,-1,sizeof memo);
	cin>>n>>m;
	for(int i=0;i<n;i++){
		cin>>v[i]>>w[i];
	}
	cout<<dfs(0,m);
	 
	 
    return 0;
}
py： 
 
from functools import lru_cache

n, m = map(int, input().split())
v = []
w = []
for i in range(n):
    a, b = map(int, input().split())
    v.append(a)
    w.append(b)

@lru_cache(maxsize=None)
def dfs(x, remaining_capacity):
    if x < 0:  # 终止条件
        return 0
    ans = 0
    if remaining_capacity >= v[x]:  # 可以选择放入当前物品
        ans = max(dfs(x - 1, remaining_capacity), dfs(x - 1, remaining_capacity - v[x]) + w[x])
    else:  # 不能放入当前物品
        ans = dfs(x - 1, remaining_capacity)
    return ans

print(dfs(n - 1, m))




